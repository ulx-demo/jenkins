<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>PROJECT_NAME</name>
          <description>Name of the Project</description>
          <defaultValue>kitchensink</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_URL</name>
          <description>GIT Repository URL</description>
          <defaultValue>https://github.com/ulx-demo/kitchensink</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>(System)</jdk>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.43">
      <scriptText>def project = &quot;${PROJECT_NAME}&quot;
def repoURL = &quot;${GIT_URL}&quot;
def repo = project

def openshiftURL = &apos;https://openshift.default.svc&apos;


def pipelineParameters = {
  { parameters -&gt;
    stringParam(&apos;VERSION&apos;, &apos;1.0&apos;, &apos;Release version&apos;)
    stringParam(&apos;DEV_PROJECT&apos;, &quot;${project}-dev&quot;, &apos;OpenShift project for DEV&apos;)
    stringParam(&apos;INT_TEST_PROJECT&apos;, &quot;${project}-int&quot;, &apos;OpenShift project for INT_TEST&apos;)
    stringParam(&apos;UAT_PROJECT&apos;, &quot;${project}-uat&quot;, &apos;OpenShift project for UAT&apos;)
    stringParam(&apos;PROD_PROJECT&apos;, &quot;${project}-prod&quot;, &apos;OpenShift project for PROD&apos;)
    stringParam(&apos;BUILD_CONFIG&apos;, &quot;${project}&quot;, &apos;Name of the OpenShift BuildConfig&apos;)
    stringParam(&apos;IMAGE_STREAM&apos;, &quot;${project}&quot;, &apos;Name of the OpenShift ImageStream&apos;)
    stringParam(&apos;DEPLOYMENT_CONFIG&apos;, &quot;${project}&quot;, &apos;Name of the Openshift DeploymentConfig&apos;)
    stringParam(&apos;REPLICAS&apos;, &apos;2&apos;, &apos;Number of replicas for DeploymentConfig&apos;)
    stringParam(&apos;SERVICE&apos;, &quot;${project}&quot;, &apos;Name of the OpenShift Service&apos;)
  }
}

deliveryPipelineView(project.capitalize()) {
  pipelineInstances(4)
  showAggregatedPipeline()
  enableManualTriggers()
  allowPipelineStart()
  allowRebuild()
  pipelines {
    component(project.capitalize(), &quot;${project}-build&quot;)
  }
}

job(&quot;${project}-build&quot;) {
  
  parameters pipelineParameters()
  deliveryPipelineConfiguration(&apos;Dev&apos;, &apos;Build Image&apos;)

  wrappers {
    deliveryPipelineVersion(&apos;${VERSION}.${BUILD_NUMBER}&apos;, true)
  }
  
  steps {    
    managedScript(&apos;openshift-tag-build&apos;) {
      arguments(&apos;$BUILD_CONFIG&apos;, &apos;$IMAGE_STREAM:$PIPELINE_VERSION&apos;, &apos;$DEV_PROJECT&apos;)
    }
    
    managedScript(&apos;openshift-start-build&apos;) {
      arguments(&apos;$BUILD_CONFIG&apos;, &apos;$DEV_PROJECT&apos;)
    }

    managedScript(&apos;openshift-tag-build&apos;) {
      arguments(&apos;$BUILD_CONFIG&apos;, &apos;$IMAGE_STREAM:latest&apos;, &apos;$DEV_PROJECT&apos;)
    }  
  }
  
  publishers {
    downstreamParameterized {
      trigger(&quot;${project}-dev-deploy&quot;) {
        condition(&apos;UNSTABLE_OR_BETTER&apos;)
        parameters {
          currentBuild()
        }
      }
    }
  }    

}

job(&quot;${project}-dev-deploy&quot;) {

  pipelineParameters()
  deliveryPipelineConfiguration(&apos;Dev&apos;, &apos;Deploy on OpenShift&apos;)

  steps {
    managedScript(&apos;openshift-scale-dc&apos;) {
      arguments(&apos;$DEPLOYMENT_CONFIG&apos;, &apos;0&apos;, &apos;$DEV_PROJECT&apos;)
    }
    managedScript(&apos;openshift-tag-image&apos;) {
      arguments(&apos;$IMAGE_STREAM:$PIPELINE_VERSION&apos;, &apos;$IMAGE_STREAM:$VERSION-dev&apos;, &apos;$DEV_PROJECT&apos;)
    }
    managedScript(&apos;openshift-scale-dc&apos;) {
      arguments(&apos;$DEPLOYMENT_CONFIG&apos;, &apos;$REPLICAS&apos;, &apos;$DEV_PROJECT&apos;)
    }
    managedScript(&apos;openshift-verify-svc&apos;) {
      arguments(&apos;$SERVICE&apos;, &apos;$DEV_PROJECT&apos;)
    }
  }
  
  publishers {
    downstreamParameterized {
      trigger(&quot;${project}-int-deploy&quot;) {
        condition(&apos;UNSTABLE_OR_BETTER&apos;)
        parameters {
          currentBuild()
        }
      }
    }
  }    
  
  
}

job(&quot;${project}-int-deploy&quot;) {

  pipelineParameters()
  deliveryPipelineConfiguration(&apos;Int&apos;, &apos;Deploy on OpenShift&apos;)

  steps {
    managedScript(&apos;openshift-scale-dc&apos;) {
      arguments(&apos;$DEPLOYMENT_CONFIG&apos;, &apos;0&apos;, &apos;$INT_TEST_PROJECT&apos;)
    }
    managedScript(&apos;openshift-tag-image&apos;) {
      arguments(&apos;$IMAGE_STREAM:$PIPELINE_VERSION&apos;, &apos;${IMAGE_STREAM}:${VERSION}-int&apos;, &apos;$DEV_PROJECT&apos;)
    }
    managedScript(&apos;openshift-scale-dc&apos;) {
      arguments(&apos;$DEPLOYMENT_CONFIG&apos;, &apos;$REPLICAS&apos;, &apos;$INT_TEST_PROJECT&apos;)
    }
    managedScript(&apos;openshift-verify-svc&apos;) {
      arguments(&apos;$SERVICE&apos;, &apos;$INT_TEST_PROJECT&apos;)
    }
  }
  
  publishers {
    downstreamParameterized {
      trigger(&quot;${project}-int-test&quot;) {
        condition(&apos;UNSTABLE_OR_BETTER&apos;)
        parameters {
          currentBuild()
        }
      }
    }
  }    

  
}

mavenJob(&quot;${project}-int-test&quot;) {
  
  pipelineParameters()
  deliveryPipelineConfiguration(&apos;Int&apos;, &apos;Run Integration Tests&apos;)

  jdk(&apos;java-1.8.0-oracle&apos;)
  
  scm {
    git {
      remote {
        name(repo)
        url(repoURL)
      }
    }
  }
 
  goals(&apos;test -Pgatling-openshift -Dgatling.simulationClass=IntTestSimulation&apos;)
  
  publishers {
    archiveGatling()
    downstreamParameterized {
      trigger(&quot;${project}-uat-deploy&quot;) {
        condition(&apos;UNSTABLE_OR_BETTER&apos;)
        parameters {
          currentBuild()
        }
      }
    }
  }

}

job(&quot;${project}-uat-deploy&quot;) {

  pipelineParameters()
  deliveryPipelineConfiguration(&apos;UAT&apos;, &apos;Deploy on OpenShift&apos;)

  steps {
    managedScript(&apos;openshift-scale-dc&apos;) {
      arguments(&apos;$DEPLOYMENT_CONFIG&apos;, &apos;0&apos;, &apos;$COM_TEST_PROJECT&apos;)
    }
    managedScript(&apos;openshift-tag-image&apos;) {
      arguments(&apos;$IMAGE_STREAM:$PIPELINE_VERSION&apos;, &apos;${IMAGE_STREAM}:${VERSION}-com&apos;, &apos;$DEV_PROJECT&apos;)
    }
    managedScript(&apos;openshift-scale-dc&apos;) {
      arguments(&apos;$DEPLOYMENT_CONFIG&apos;, &apos;$REPLICAS&apos;, &apos;$COM_TEST_PROJECT&apos;)
    }
    managedScript(&apos;openshift-verify-svc&apos;) {
      arguments(&apos;$SERVICE&apos;, &apos;$COM_TEST_PROJECT&apos;)
    }
  }
  
  publishers {
    downstreamParameterized {
      trigger(&quot;${project}-uat-test&quot;) {
        condition(&apos;UNSTABLE_OR_BETTER&apos;)
        parameters {
          currentBuild()
        }
      }
    }
  }

  
}

mavenJob(&quot;${project}-uat-test&quot;) {
  
  pipelineParameters()
  deliveryPipelineConfiguration(&apos;UAT&apos;, &apos;Run Tests&apos;)

  jdk(&apos;java-1.8.0-oracle&apos;)

  scm {
    git {
      remote {
        name(repo)
        url(repoURL)
      }
    }
  }
  
  goals(&apos;test -Pgatling-openshift -Dgatling.simulationClass=UatSimulation&apos;)
  
  publishers {
    archiveGatling()
    downstreamParameterized {
      trigger(&quot;${project}-prod-deploy&quot;) {
        condition(&apos;UNSTABLE_OR_BETTER&apos;)
        parameters {
          currentBuild()
        }
      }
    }
  }

}

job(&quot;${project}-prod-deploy&quot;) {
  
  pipelineParameters()
  deliveryPipelineConfiguration(&apos;Prod&apos;, &apos;Deploy on OpenShift&apos;)
  
  steps {
    managedScript(&apos;openshift-tag-image&apos;) {
      arguments(&apos;$IMAGE_STREAM:$PIPELINE_VERSION&apos;, &apos;${IMAGE_STREAM}:${PIPELINE_VERSION}-uat&apos;, &apos;$DEV_PROJECT&apos;)
    }
  }
  
}</scriptText>
      <usingScriptText>true</usingScriptText>
      <ignoreExisting>false</ignoreExisting>
      <removedJobAction>IGNORE</removedJobAction>
      <removedViewAction>IGNORE</removedViewAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
      <additionalClasspath></additionalClasspath>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>